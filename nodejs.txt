$ node main.js
$ npm ls
$ npm install express
$ npm ls -g
$ npm install express -g
$ npm uninstall express
$ npm update express
$ npm search express
$ npm init  //create module
$ npm adduser
$ npm publish


Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks.

Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.

In Node Application, any async function accepts a callback as the last parameter and a callback function accepts an error as the first parameter. fs.readFile('input.txt', function (err, data) {

////emmiter////
EventEmitter Class
addListener(event, listener)
on(event, listener)
once(event, listener)
removeListener(event, listener)
removeAllListeners([event])
setMaxListeners(n)
listeners(event)  //Returns an array of listeners for the specified event.
emit(event, [arg1], [arg2], [...])

listenerCount(emitter, event)  //Class method


////buffer////
var buf = new Buffer(10);
var buf = new Buffer([10, 20, 30, 40, 50]);
var buf = new Buffer("Simply Easy Learning", "utf-8");
buf.write(string[, offset][, length][, encoding]);  //offset − This is the index of the buffer to start writing at. Default value is 0.
//his method returns the number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.

buf.toString([encoding][, start][, end]);
buf.toJSON(buf);
Buffer.concat(list[, totalLength])
buf.compare(otherBuffer);  //Returns a number indicating whether it comes before or after or is the same as the otherBuffer in sort order.
//.compare() and .equals() were added in node v0.11.13.
buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])
buf.slice([start][, end]) //Negative indexes start from the end of the buffer.
buf.length;
Buffer.compare(buf1, buf2)  //The same as buf1.compare(buf2). Useful for sorting an array of buffers.
Buffer.isBuffer(obj)


////stream////
Each type of Stream is an EventEmitter instance and throws several events at different instance of times. 
data − This event is fired when there is data is available to read.
end − This event is fired when there is no more data to read.
error − This event is fired when there is any error receiving or writing data.
finish − This event is fired when all the data has been flushed to underlying system.

