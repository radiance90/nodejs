$ cd /tmp
$ wget http://nodejs.org/dist/v6.3.1/node-v6.3.1-linux-x64.tar.gz
$ tar xvfz node-v6.3.1-linux-x64.tar.gz
$ mkdir -p /usr/local/nodejs
$ mv node-v6.3.1-linux-x64/* /usr/local/nodejs

$ node main.js
$ npm ls
$ npm install express
$ npm ls -g
$ npm install express -g
$ npm uninstall express
$ npm update express
$ npm search express
$ npm init  //create module
$ npm adduser
$ npm publish


Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks.

Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.

In Node Application, any async function accepts a callback as the last parameter and a callback function accepts an error as the first parameter. fs.readFile('input.txt', function (err, data) {

////emmiter////
EventEmitter Class
addListener(event, listener)
on(event, listener)
once(event, listener)
removeListener(event, listener)
removeAllListeners([event])
setMaxListeners(n)
listeners(event)  //Returns an array of listeners for the specified event.
emit(event, [arg1], [arg2], [...])

listenerCount(emitter, event)  //Class method


////buffer////
var buf = new Buffer(10);
var buf = new Buffer([10, 20, 30, 40, 50]);
var buf = new Buffer("Simply Easy Learning", "utf-8");
buf.write(string[, offset][, length][, encoding]);  //offset − This is the index of the buffer to start writing at. Default value is 0.
//his method returns the number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.

buf.toString([encoding][, start][, end]);
buf.toJSON(buf);
Buffer.concat(list[, totalLength])
buf.compare(otherBuffer);  //Returns a number indicating whether it comes before or after or is the same as the otherBuffer in sort order.
//.compare() and .equals() were added in node v0.11.13.
buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])
buf.slice([start][, end]) //Negative indexes start from the end of the buffer.
buf.length;
Buffer.compare(buf1, buf2)  //The same as buf1.compare(buf2). Useful for sorting an array of buffers.
Buffer.isBuffer(obj)


////stream////
Each type of Stream is an EventEmitter instance and throws several events at different instance of times. 
data − This event is fired when there is data is available to read.
end − This event is fired when there is no more data to read.
error − This event is fired when there is any error receiving or writing data.
finish − This event is fired when all the data has been flushed to underlying system.

////file system////
//open//
fs.open(path, flags[, mode], callback)
path − This is the string having file name including path.
flags − Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.
mode − It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.
callback − This is the callback function which gets two arguments (err, fd).
r 	Open file for reading. An exception occurs if the file does not exist.
r+ 	Open file for reading and writing. An exception occurs if the file does not exist.
rs 	Open file for reading in synchronous mode.
rs+ 	Open file for reading and writing, asking the OS to open it synchronously. See notes for 'rs' about using this with caution.
w 	Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
wx 	Like 'w' but fails if the path exists.
w+ 	Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
wx+ 	Like 'w+' but fails if path exists.
a 	Open file for appending. The file is created if it does not exist.
ax 	Like 'a' but fails if the path exists.
a+ 	Open file for reading and appending. The file is created if it does not exist.
ax+ 	Like 'a+' but fails if the the path exists.
//stat//
fs.stat(path, callback)
stats.isFile() 	Returns true if file type of a simple file.
stats.isDirectory() 	Returns true if file type of a directory.
stats.isBlockDevice() 	Returns true if file type of a block device.
stats.isCharacterDevice() 	Returns true if file type of a character device.
stats.isSymbolicLink() 	Returns true if file type of a symbolic link.
stats.isFIFO() 	Returns true if file type of a FIFO.
stats.isSocket() 	Returns true if file type of asocket.

//write//
fs.writeFile(filename, data[, options], callback)
options − The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is 'w'

//read//
fs.read(fd, buffer, offset, length, position, callback)
fd − This is the file descriptor returned by fs.open().
buffer − This is the buffer that the data will be written to.
offset − This is the offset in the buffer to start writing at.
length − This is an integer specifying the number of bytes to read.
position − This is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.
callback − This is the callback function which gets the three arguments, (err, bytesRead, buffer).

//close//
fs.close(fd, callback)
fd − This is the file descriptor returned by file fs.open() method.
callback − This is the callback function No arguments other than a possible exception are given to the completion callback.

//truncate//
fs.ftruncate(fd, len, callback)
len − This is the length of the file after which the file will be truncated.

//delete//
fs.unlink(path, callback)

//create directory//
fs.mkdir(path[, mode], callback)
mode − This is the directory permission to be set. Defaults to 0777.

//read dir//
fs.readdir(path, callback)
callback − This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.

//remove directory//
fs.rmdir(path, callback)

//others//
fs.rename(oldPath, newPath, callback)
fs.exists(path, callback) //not recommended
Test whether or not the given path exists by checking with the file system. Then call the callback argument with either true or false.
fs.appendFile(filename, data[, options], callback)
fs.write(fd, buffer, offset, length[, position], callback)
fs.write(fd, data[, position[, encoding]], callback)
fs.writeFile(filename, data[, options], callback)
fs.stat(path, callback)
fs.fstat(fd, callback)


////global objects////
The __filename represents the filename of the code being executed. This is the resolved absolute path of this code file.
The __dirname represents the name of the directory that the currently executing script resides in.
The setTimeout(cb, ms) global function is used to run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.
The clearTimeout(t) global function is used to stop a timer that was previously created with setTimeout(). Here t is the timer returned by the setTimeout() function.
The setInterval(cb, ms) global function is used to run callback cb repeatedly after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.
