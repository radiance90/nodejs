////Express////
$ npm install express --save  
$ npm install body-parser --save  //This is a node.js middleware for handling JSON, Raw, Text and URL encoded form data.
$ npm install cookie-parser --save  //Parse Cookie header and populate req.cookies with an object keyed by the cookie names.
$ npm install multer --save  //This is a node.js middleware for handling multipart/form-data.

//request//
req.accepts(types) //This method checks if the specified content types are acceptable, based on the request’s Accept HTTP header field. 
req.get(field)  //This method returns the specified HTTP request header field.
req.is(type)  //This method returns true if the incoming request’s "Content-Type" HTTP header field matches the MIME type specified by the type parameter.
req.param(name [, defaultValue])  //This method returns the value of param name when present. 
req.params  //An object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the "name" property is available as req.params.name. This object defaults to {}.
req.query  //An object containing a property for each query string parameter in the route.
req.param('<param_name>') //Lookup is performed in the following order: req.params ->req.body->req.query

//response//
res.append(field [, value])  //This method appends the specified value to the HTTP response header field.
res.attachment([filename])  //This method is used to send a file as an attachment in the HTTP response. 
res.cookie(name, value [, options])  //This method is used to set cookie name to value. The value parameter may be a string or object converted to JSON.
res.clearCookie(name [, options])  //This method is used to clear the cookie specified by name.
res.download(path [, filename] [, fn])  //This method is used to transfer the file at path as an "attachment". Typically, browsers will prompt the user for download.
res.end([data] [, encoding])  //This method is used to end the response process.
res.format(object)  //This method is used to perform content-negotiation on the Accept HTTP header on the request object, when present.
res.get(field)  //This method is used to return the HTTP response header specified by field.
res.json([body])  //This method is used to send a JSON response.
res.links(links)  //This method is used to join the links provided as properties of the parameter to populate the response’s Link HTTP header field.
res.location(path)  //This method is used to set the response Location HTTP header field based on the specified path parameter. 
res.redirect([status,] path)  //This method is used to redirect to the URL dervied from the specified path, with specified HTTP status code status. 
res.send([body])  //This method is used to send the HTTP response.
res.sendFile(path [, options] [, fn])  //This method is used to transfer the file at the given path. Sets the Content-Type response HTTP header field based on the filename’s extension.
res.sendStatus(statusCode)  //This method is used to set the response HTTP status code to statusCode and send its string representation as the response body.
res.set(field [, value])  //This method is used to set the response’s HTTP header field to value.
res.set(field [, value])  //This method is used to set the response’s HTTP header field to value.
res.status(code)  //This method is used to set the HTTP status for the response.
res.type(type)  //This method is used to set the Content-Type HTTP header to the MIME type.

////Serving Static Files////
Express provides a built-in middleware express.static to serve static files, such as images, CSS, JavaScript, etc.

You simply need to pass the name of the directory where you keep your static assets, to the express.static middleware to start serving the files directly. For example, if you keep your images, CSS, and JavaScript files in a directory named public, you can do this −

app.use(express.static('public'));

